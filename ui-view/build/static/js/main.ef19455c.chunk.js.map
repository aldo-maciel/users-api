{"version":3,"sources":["users/users.service.ts","shared/service/facade.service.ts","users/users.controller.ts","shared/paginate/paginate.render.tsx","shared/paginate/paginate.component.ts","users/users.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["UsersService","pagination","this","doGet","URL","username","url","method","params","body","parameters","data","headers","axios","request","response","toastr","error","message","doRequest","getUrl","undefined","UsersController","service","state","rows","user","repos","findAll","setState","getUsers","login","getUser","getRepos","React","Component","PaginateRender","className","disabled","start","props","step","onClick","paginate","title","callSearch","onChange","option","UsersView","length","map","id","key","showDetail","colSpan","onChangePaginate","Date","created_at","toLocaleString","href","html_url","target","rel","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ef19455c.chunk.js","sourcesContent":["import { ServiceFacade } from 'src/shared/service/facade.service';\nimport { Pagination } from '../shared/paginate/paginate.type';\nimport { User } from './user';\nimport { Repo } from '../repos/repo';\n\nexport class UsersService extends ServiceFacade {\n    private get URL(): string {\n        return 'users';\n    }\n\n    findAll(pagination: Pagination): Promise<{ data: Array<User> }> {\n        return this.doGet<{ data: Array<User> }>(this.URL, pagination);\n    }\n\n    getUser(username: string): Promise<{ data: User }> {\n        return this.doGet<{ data: User }>(`${ this.URL }/${ username }/details`);\n    }\n\n    getRepos(username: string): Promise<{ data: Array<Repo> }> {\n        return this.doGet<{ data: Array<Repo> }>(`${ this.URL }/${ username }/repos`);\n    }\n}\n","import toastr from 'toastr';\nimport axios, { Method } from 'axios';\n\nexport class ServiceFacade {\n    protected getUrl(url: string): string {\n        const base = '/api/v1/';\n        if (process.env.NODE_ENV === 'production') {\n            return `${ base }${ url }`;\n        }\n        return `http://localhost:3001${ base }${ url }`;\n    }\n\n    private async doRequest<T>(method: Method = 'GET', url: string, params?: unknown, body?: unknown): Promise<T> {\n        try {\n            const parameters = {\n                url,\n                method,\n                params,\n                data: body,\n                headers: {}\n            };\n            if (body) {\n                parameters.data = body;\n            }\n            if (params) {\n                parameters.params = params;\n            }\n            return await axios.request(parameters);\n        } catch (error) {\n            const { response = { data: {} } } = error;\n            toastr.error(response.data.message || error.message || 'An operation occurs with error!', 'Error');\n            throw error;\n        }\n    }\n\n    /**\n     * Make a post request to the server\n     *\n     */\n    doPost<T>(url: string, params?: unknown): Promise<T> {\n        return this.doRequest('post', this.getUrl(url), undefined, params);\n    }\n\n    /**\n     * Make a get request to the server\n     *\n     */\n    doGet<T>(url: string, params?: unknown): Promise<T> {\n        return this.doRequest('get', this.getUrl(url), params);\n    }\n\n    /**\n     * Make a put request to the server\n     *\n     */\n    doPut<T>(url: string, params?: unknown): Promise<T> {\n        return this.doRequest('put', this.getUrl(url), undefined, params);\n    }\n\n    /**\n     * Make a delete request to the server\n     *\n     */\n    doDelete<T>(url: string, params?: unknown): Promise<T> {\n        return this.doRequest('delete', this.getUrl(url), params);\n    }\n}\n","import React from 'react';\n\nimport { UsersService } from './users.service';\nimport { Pagination } from '../shared/paginate/paginate.type';\nimport { User } from './user';\nimport { Repo } from '../repos/repo';\n\ntype State = {\n    rows: Array<User>,\n    user: User,\n    repos: Array<Repo>\n}\n\nexport class UsersController extends React.Component<{}, State> {\n    private pagination!: Pagination;\n    private readonly service: UsersService = new UsersService();\n    state = {\n        rows: [] as Array<User>,\n        user: {} as User,\n        repos: []\n    };\n\n    async getUsers() {\n        const { data: rows } = await this.service.findAll(this.pagination);\n\n        this.setState({ rows, user: {} as User });\n    }\n\n    /**\n     * Call <code>find</code> method to update view\n     * @param pagination\n     */\n    onChangePaginate(pagination: Pagination) {\n        this.pagination = pagination;\n        this.getUsers();\n    }\n\n    async showDetail(login: string) {\n        const { data: user } = await this.service.getUser(login);\n        const { data: repos } = await this.service.getRepos(login);\n\n        this.setState({ user, repos });\n    }\n}\n","import React from 'react';\nimport { PaginateComponent } from './paginate.component';\n\nexport class PaginateRender extends PaginateComponent {\n\n    render(): React.ReactElement {\n        return (\n            <div className=\"pagination\">\n                <button disabled={ this.pagination.start < this.props.step } onClick={ () => this.paginate(2) }\n                        className=\"btn\" title=\"previous\">\n                    <em className=\"eva eva-chevron-left eva-3x\" />\n                </button>\n                <button onClick={ () => this.paginate(1) }\n                        className=\"btn\" title=\"next\">\n                    <em className=\"eva eva-chevron-right-outline eva-3x\" />\n                </button>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Pagination, Props } from './paginate.type';\n\nexport class PaginateComponent extends React.Component<Props> {\n    protected pagination: Pagination = { start: 0, step: this.props.step };\n\n    componentDidMount() {\n        this.callSearch();\n    }\n\n    /**\n     * Call onChanges method whe the page changes\n     */\n    callSearch() {\n        this.props.onChange(this.pagination);\n    }\n\n    /**\n     * Select the page according to <code>option</code> parameter\n     *\n     * @param option\n     */\n    protected paginate(option: number) {\n        switch (option) {\n            case 1: {\n                this.pagination.start += this.props.step;\n                break;\n            }\n            case 2: {\n                if (this.pagination.start <= 0) return;\n                this.pagination.start -= this.props.step;\n                break;\n            }\n            default: {\n                this.pagination.start = 0;\n            }\n        }\n        this.callSearch();\n    }\n}\n","import React from 'react';\nimport { UsersController } from './users.controller';\nimport { PaginateRender } from '../shared/paginate/paginate.render';\n\nexport class UsersView extends UsersController {\n\n    render() {\n        return (\n            <div className=\"users\">\n                <div className=\"row\">\n                    <div className=\"column text-center\">\n                        <h2>Users</h2>\n                    </div>\n                </div>\n                <div className=\"users-container\">\n                    <div className=\"users-grid\">\n                        <table className=\"table\">\n                            <thead>\n                            <tr>\n                                <th className=\"text-center\">id</th>\n                                <th className=\"text-center\">login</th>\n                            </tr>\n                            </thead>\n                            { this.state.rows.length ? (\n                                <tbody>\n                                { this.state.rows.map(({ id, login }) => (\n                                        <tr className=\"pointer\" key={ id } onClick={ () => this.showDetail(login) }>\n                                            <td className=\"text-center\">{ id }</td>\n                                            <td className=\"users-api-name\">{ login }</td>\n                                        </tr>\n                                    )\n                                ) }\n                                </tbody>\n                            ) : (\n                                <tbody>\n                                <tr>\n                                    <td className=\"text-center\" colSpan={ 2 }>\n                                        Not found users\n                                    </td>\n                                </tr>\n                                </tbody>\n                            ) }\n                            <tfoot>\n                            <tr className=\"no-hover\">\n                                <td colSpan={ 2 }>\n                                    <PaginateRender\n                                        onChange={ pagination => this.onChangePaginate(pagination) }\n                                        step={ 20 }\n                                    />\n                                </td>\n                            </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                    { this.state.user.login && (\n                        <div className=\"users-user\">\n                            <div className=\"row\">\n                                <div className=\"users-detail\">\n                                    <div>{ this.state.user.id }</div>\n                                    <div>{ new Date(this.state.user.created_at).toLocaleString() }</div>\n                                    <div>{ this.state.user.login }</div>\n                                    <div>\n                                        <a\n                                            href={ this.state.user.html_url }\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            { this.state.user.html_url }\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <h3>Repositories</h3>\n                            </div>\n                            <div className=\"row users-repositions\">\n                                <table className=\"table\">\n                                    <thead>\n                                    <tr>\n                                        <th className=\"text-center\">id</th>\n                                        <th>name</th>\n                                        <th>url</th>\n                                    </tr>\n                                    </thead>\n                                    { this.state.repos.length ? (\n                                        <tbody>\n                                        { this.state.repos.map(({ id, name, html_url }) => (\n                                                <tr key={ id }>\n                                                    <td className=\"text-center\">{ id }</td>\n                                                    <td>{ name }</td>\n                                                    <td>\n                                                        <a\n                                                            href={ html_url }\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            { html_url }\n                                                        </a>\n                                                    </td>\n                                                </tr>\n                                            )\n                                        ) }\n                                        </tbody>\n                                    ) : (\n                                        <tbody>\n                                        <tr>\n                                            <td className=\"text-center\" colSpan={ 3 }>\n                                                Not found repos\n                                            </td>\n                                        </tr>\n                                        </tbody>\n                                    ) }\n                                </table>\n                            </div>\n                        </div>\n                    ) }\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { UsersView } from './users/users';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <UsersView />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}